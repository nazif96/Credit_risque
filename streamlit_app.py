import streamlit as st
import joblib
import numpy as np 
import xgboost as xgb 

st.title("üéà Eligibility App ")
st.write(
    "Interface Web Simple d'√©ligible ou non  du client √† un cr√©dit"
)

# Charger le mod√®le
model = joblib.load("xgboost_model.joblib")

# Interface utilisateur
st.title("Pr√©diction de l'√âligibilit√© au Cr√©dit")

# Entr√©e des informations client
age = st.number_input("√Çge du client", min_value=18, max_value=100, value=30)
revenu = st.number_input("Revenu mensuel (‚Ç¨)", min_value=0, value=3000)
historique_credit = st.selectbox("Historique de cr√©dit", ["Bon", "Moyen", "Mauvais"])
montant_loan = st.number_input("Montant du pr√™t demand√© (‚Ç¨)", min_value=0, value=5000)

# Pr√©traitement des donn√©es pour correspondre au format du mod√®le
historique_credit_map = {"Bon": 2, "Moyen": 1, "Mauvais": 0}
X_new = np.array([[age, revenu, historique_credit_map[historique_credit], montant_loan]])


# Faire la pr√©diction
if st.button("Pr√©dire"):
    import xgboost as xgb

    # V√©rifier et reformater X_new si n√©cessaire
    print("Type de X_new :", type(X_new))
    print("Shape de X_new :", X_new.shape)
    print("Contenu de X_new :", X_new)

    # Si la shape n'est pas correcte, on la corrige
    if len(X_new.shape) == 1:
        X_new = X_new.reshape(1, -1)

    # Convertir X_new en DMatrix pour XGBoost
    dmatrix_new = xgb.DMatrix(X_new)

    # Faire la pr√©diction avec XGBoost
    prediction = model.predict(dmatrix_new)[0]

    # Interpr√©ter le r√©sultat
    statut = "GOOD" if prediction == 1 else "BAD"
    
    st.write(f"üîç **Statut du compte checking pr√©dit** : `{statut}`")
    if statut == "GOOD":
        st.success("‚úÖ Le client est √©ligible au cr√©dit !")
    else:
        st.error("‚ùå Le client n'est pas √©ligible au cr√©dit.")
