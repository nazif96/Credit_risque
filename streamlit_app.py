import joblib
import numpy as np
import pandas as pd
import streamlit as st

# Charger le mod√®le
try:
    model = joblib.load("log_reg_model.joblib")
except Exception as e:
    st.error(f"Erreur lors du chargement du mod√®le : {e}")
    st.stop()

# D√©finir manuellement les features attendues si elles sont connues
FEATURES_EXPECTED = [
    "age", "revenu", "historique_credit_Bon", "historique_credit_Mauvais", "montant_loan"
]  # Ajuste cette liste en fonction du mod√®le

# Interface utilisateur
st.title("üìä Pr√©diction de l'√âligibilit√© au Cr√©dit")

with st.form("credit_form"):
    age = st.number_input("√Çge du client", min_value=18, max_value=100, value=30)
    revenu = st.number_input("Revenu mensuel (‚Ç¨)", min_value=0, value=3000)
    historique_credit = st.selectbox("Historique de cr√©dit", ["Bon", "Mauvais"])
    montant_loan = st.number_input("Montant du pr√™t demand√© (‚Ç¨)", min_value=0, value=5000)

    submit = st.form_submit_button("Pr√©dire")

if submit:
    # Cr√©ation du DataFrame
    data = {
        "age": [age],
        "revenu": [revenu],
        "historique_credit": [historique_credit],
        "montant_loan": [montant_loan]
    }

    X_new = pd.DataFrame(data)

    # **Encodage manuel des variables cat√©gorielles (One-Hot Encoding)**
    X_new = pd.get_dummies(X_new, columns=["historique_credit"])

    # Ajouter les colonnes manquantes avec des valeurs par d√©faut (0 pour One-Hot Encoding)
    for col in FEATURES_EXPECTED:
        if col not in X_new.columns:
            X_new[col] = 0

    # R√©ordonner les colonnes selon celles attendues par le mod√®le
    X_new = X_new[FEATURES_EXPECTED]

    try:
        # V√©rifier que le nombre de features correspond
        if X_new.shape[1] != model.n_features_in_:
            st.error(f"Erreur : Le mod√®le attend {model.n_features_in_} features, mais {X_new.shape[1]} ont √©t√© fournies.")
            st.stop()

        # Pr√©diction
        prediction = model.predict(X_new)[0]
        statut = "GOOD" if prediction == 1 else "BAD"

        st.write(f"üîç **Statut du compte checking pr√©dit** : `{statut}`")
        if statut == "GOOD":
            st.success("‚úÖ Le client est √©ligible au cr√©dit !")
        else:
            st.error("‚ùå Le client n'est pas √©ligible au cr√©dit.")

    except Exception as e:
        st.error(f"Erreur lors de la pr√©diction : {e}")
